class e{static async loadRemoteTheme(e){try{const t=await import(e);return t.default||t}catch(t){throw new Error(`Failed to load theme from ${e}: ${t}`)}}static async load(e){return"string"==typeof e?await this.loadRemoteTheme(e):e}}class t{theme;constructor(e){this.theme=e}generateCode(){const e=`\n        export default {\n          name: "${this.theme.name}",\n          handlers: [\n            ${this.theme.handlers.map((e=>e.toString())).join(",\n")}\n          ],\n          token: ${JSON.stringify(this.theme.token,null,2)}\n        };\n      `;return console.log(`名字${this.theme.name}`,`代码：${e}`),e}async build(e){this.generateCode()}}class n{themes=new Map;themeUrls=new Map;async registerRemoteTheme(t){const n=await e.load(t);this.themes.set(n.name,n),this.themeUrls.set(n.name,t)}async registerThemeFromDiff(t){const n=await e.load(this.themeUrls.get(t.base)||t.base),s={name:t.name,handlers:[...n.handlers],token:{...n.token}};return t.tokenDiff&&(s.token={...s.token,...t.tokenDiff}),t.handlersToAdd&&s.handlers.push(...t.handlersToAdd),t.handlersToRemove&&t.handlersToRemove.sort(((e,t)=>t-e)).forEach((e=>{s.handlers.splice(e,1)})),t.handlersToModify&&t.handlersToModify.forEach((({index:e,handler:t})=>{e>=0&&e<s.handlers.length&&(s.handlers[e]=t)})),this.themes.set(s.name,s),s}getTheme(e){return this.themes.get(e)}}export{t as ThemeBuilder,n as ThemeRegistry};
//# sourceMappingURL=bundle.esm.js.map
